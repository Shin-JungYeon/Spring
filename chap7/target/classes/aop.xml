<?xml version="1.0" encoding="UTF-8" ?>
<!-- chap7/src/main/java/aop.xml -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					http://www.springframework.org/schema/beans/spring-beans.xsd
	   					http://www.springframework.org/schema/context
	   					http://www.springframework.org/schema/context/spring-context.xsd
	   					http://www.springframework.org/schema/aop
	   					http://www.springframework.org/schema/aop/spring-aop.xsd">
	<bean id="write" class="spring.WriteImpl">
		<constructor-arg><ref bean="articleDao" /></constructor-arg>
	</bean>
	<bean id="articleDao" class="spring.MariadbArticleDao" />
	
	<bean id="logging" class="spring.LoggingAspect" />  <!-- LoggingAspect 객체를 컨테이너에 생성. -->
	<aop:config>
		<aop:pointcut expression="execution(public * spring.*Impl.*(..))" id="servicepointcut" />  <!-- 접근제어자는 public. 리턴타입 상관 x. spring패키지의 Impl로 끝나는 것의 메서드. (..) 매개변수 상관 x -->
		<aop:aspect id="loggingAspect" ref="logging">  <!-- 이름이 logging인 객체를 참조. LoggingAspect 클래스를 AOP 클래스로 지정. -->
			<aop:around method="logging" pointcut-ref="servicepointcut" />  <!-- around : pointcut 대상의 시작 전 후를 전부 관장. 끼어들기. -->
		</aop:aspect>
	</aop:config>
</beans>
<!-- 
	aop 관련 용어
		pointcut : 핵심 기능을 가진 메서드 설정.
			execution(public * spring.*Impl.*(..)) : spring 패키지의 클래스 중 클래스명이 *Impl인 클래스의 모든 public 메서드를 지정. 매개변수의 유무 상관 없음.
		
		aspect : AOP로 사용될 객체를 지정해줌.
			ref="logging" : 객체의 이름. 객체를 끌어오는 것.
			id="loggingAspect" : AOP에 설정된 객체의 이름.
		
		advice : AOP가 실행될 시점 지정.
			around : 핵심 기능의 실행 전, 후.
			before : 핵심 기능의 실행 전.
			after  : 핵심 기능의 실행 후.
			afterReturning : 핵심 기능의 실행 후 정상 종료되었을 경우.
			afterThrowing  : 핵심 기능의 실행 후 예외 종료되었을 경우. 예외 객체를 전달해줌.
-->
