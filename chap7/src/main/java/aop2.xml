<?xml version="1.0" encoding="UTF-8" ?>
<!-- chap7/src/main/java/aop2.xml -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					http://www.springframework.org/schema/beans/spring-beans.xsd
	   					http://www.springframework.org/schema/context
	   					http://www.springframework.org/schema/context/spring-context.xsd
	   					http://www.springframework.org/schema/aop
	   					http://www.springframework.org/schema/aop/spring-aop.xsd">
	<bean id="loggingAdvice" class="xml.LoggingAdvice" />
	<bean id="cacheAdvice" class="xml.ArticleCacheAdvice" />
	<bean id="traceAdvice" class="xml.UpdateMemberInfoTraceAdvice" />
	
	<!-- AOP 설정. -->
	<aop:config>
		<aop:aspect id="loggingAspect" ref="loggingAdvice" order="3" >  <!-- aspect 설정. loggingAdvice 클래스를 aspect 클래스로 사용. order : aop가 여러 개일 때 순서 지정. 핵심메서드를 중심으로 중간에 끼어들 순서. -->
			<aop:pointcut id="publicMethod" expression="execution(public * xml..*(..))" />  <!-- 실제 진행되어야 하는 핵심 메서드 설정. xml 패키지에 있는 모든 public 메서드에 관여. -->
			
			<!-- Advice 설정. -->
			<aop:before method="before" pointcut-ref="publicMethod" />  <!-- method="before" : pointcut에 설정된 메서드 실행 전에 loggingAdviece 객체의 before 메서드 호출. -->
			<aop:after-returning method="afterReturning" pointcut-ref="publicMethod" returning="ret" />  <!-- 정상 종료 후에 return값을 ret에 전달. -->
			<aop:after-throwing method="afterThrowing" pointcut-ref="publicMethod" throwing="ex" />  <!-- 에러 발생했을 때 예외처리값을 ex에 전달. -->
			<aop:after method="afterFinally" pointcut-ref="publicMethod" />  <!-- 정상, 오류 상관없이 public 메서드 종료 후에 -->
			<!-- Advice 설정 종료. -->
		</aop:aspect>
		<aop:aspect id="cacheAspect" ref="cacheAdvice" order="2">  <!-- loggingAspect 보다 먼저 실행. -->
			<aop:around method="cache" pointcut="execution(public * *..ReadArticleServiceImpl.*(..))" />  <!-- 핵심 메서드 실행 전 후에. -->
			<!-- <aop:around method="cache" pointcut="execution(public * *..ReadArticleService.*(..))" />
								클래스가 아닌 인터페이스로 설정해도 실행 됨. 메서드는 인터페이스의 멤버이기도 하기 때문. 하지만 이렇게 하면 인터페이스를 구현한 클래스의 메서드 내용은 나타나지 않음. -->
		</aop:aspect>
		<aop:aspect id="traceAspect" ref="traceAdvice" order="1">
			<!-- pointcut 으로 매개변수 목록을 설정. ret(boolean),id(String),info(UpdateInfo) 중 id,info의 자료형을 가진 것만 설정. 매개변수의 이름은 상관이 없음. -->
			<aop:after-returning method="traceReturn" pointcut="args(id,info)" returning="ret" arg-names="ret,id,info" />
		</aop:aspect>
	</aop:config>
</beans>